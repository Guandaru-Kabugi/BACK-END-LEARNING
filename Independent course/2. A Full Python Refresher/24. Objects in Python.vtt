WEBVTT

1
00:00:00.727 --> 00:00:02.901
- [Instructor] Hi, and
welcome back to the programme.

2
00:00:02.901 --> 00:00:04.716
In this video, we're
going to look at classes

3
00:00:04.716 --> 00:00:08.078
and objects and how they are similar

4
00:00:08.078 --> 00:00:11.731
and yet different from dictionary.

5
00:00:11.731 --> 00:00:14.777
We looked at the example
dictionary in the last video,

6
00:00:14.777 --> 00:00:16.840
about a lottery player.

7
00:00:16.840 --> 00:00:19.925
And I mentioned that a
lottery player dictionary

8
00:00:19.925 --> 00:00:23.758
can store some data, but
it can't do anything.

9
00:00:25.287 --> 00:00:27.365
I'm going to quickly go over creating

10
00:00:27.365 --> 00:00:31.137
a lottery player class, and
then I'm going to explain

11
00:00:31.137 --> 00:00:35.137
how they are different
and how they are similar.

12
00:00:55.677 --> 00:00:59.177
Okay, so this is our lottery player class.

13
00:01:00.796 --> 00:01:04.129
Now, a class is essentially a blueprint.

14
00:01:07.826 --> 00:01:11.993
A class tells us what data
every lottery player has,

15
00:01:18.218 --> 00:01:20.841
but we can personalise it.

16
00:01:20.841 --> 00:01:23.424
So, let's go into running this,

17
00:01:25.419 --> 00:01:30.297
and then it will be a lot easier
to explain how things work.

18
00:01:30.297 --> 00:01:34.464
So, let's have a lottery
player, a player variable,

19
00:01:38.521 --> 00:01:40.629
and that's going to be
equal to lottery player,

20
00:01:40.629 --> 00:01:44.802
which is our class
opening closing bracket.

21
00:01:44.802 --> 00:01:47.222
What this does is that this creates

22
00:01:47.222 --> 00:01:49.389
an object from this class.

23
00:01:50.765 --> 00:01:52.911
And when an object is created in Python,

24
00:01:52.911 --> 00:01:55.559
essentially we get a new thing,

25
00:01:55.559 --> 00:01:59.779
and that thing has whatever
properties were defined

26
00:01:59.779 --> 00:02:03.387
in this special method,
which is the init method,

27
00:02:03.387 --> 00:02:05.332
and there are two on this course

28
00:02:05.332 --> 00:02:07.271
in the beginning and two at the end.

29
00:02:07.271 --> 00:02:08.271
So __init__.

30
00:02:11.969 --> 00:02:13.608
And the properties here are defined

31
00:02:13.608 --> 00:02:16.608
as being self.name and self.numbers.

32
00:02:19.530 --> 00:02:23.613
When we create a new
object, that object is self.

33
00:02:26.398 --> 00:02:30.565
So that object gets two
properties, name and numbers.

34
00:02:32.213 --> 00:02:37.039
The name is gonna be Rolf
without the comma at the end,

35
00:02:37.039 --> 00:02:39.889
and the numbers are gonna
be this topple here.

36
00:02:39.889 --> 00:02:42.639
So, okay, let's print player.name

37
00:02:43.784 --> 00:02:46.973
and print player.numbers
for you to believe

38
00:02:46.973 --> 00:02:49.822
that what I'm saying is correct.

39
00:02:49.822 --> 00:02:51.822
So I'm going to do this.

40
00:02:54.651 --> 00:02:56.688
And what you get out is
what you would expect,

41
00:02:56.688 --> 00:02:59.105
Rolf, 5, 9, 12, 3, 1, and 21.

42
00:02:59.977 --> 00:03:02.394
That's the topple of numbers.

43
00:03:04.077 --> 00:03:06.160
So, how is this different

44
00:03:07.849 --> 00:03:11.018
from this lottery player dictionary?

45
00:03:11.018 --> 00:03:13.102
This lottery player
dictionary also has a name

46
00:03:13.102 --> 00:03:16.490
and a set of numbers, and
also it's a bit shorter,

47
00:03:16.490 --> 00:03:19.740
so really, dictionary is better, right?

48
00:03:21.093 --> 00:03:24.731
Well, we looked at in the last video

49
00:03:24.731 --> 00:03:28.898
that the dictionary can't
do stuff on its own data.

50
00:03:29.875 --> 00:03:34.042
So for the dictionary to give
us the sum of its numbers,

51
00:03:35.010 --> 00:03:37.797
we have to do something like

52
00:03:37.797 --> 00:03:41.964
sum(lottery_player_dict['numbers]).

53
00:03:43.363 --> 00:03:48.231
We have to do this, because
the lottery_player_dict itself

54
00:03:48.231 --> 00:03:50.746
cannot give us a total.

55
00:03:50.746 --> 00:03:54.413
It cannot do any
operations on its own data.

56
00:03:55.317 --> 00:03:57.567
But the lottery player can,

57
00:03:59.596 --> 00:04:03.763
because whenever we define
a method inside a class,

58
00:04:05.191 --> 00:04:07.441
we can have access to self.

59
00:04:11.111 --> 00:04:13.512
And self is the thing that contains

60
00:04:13.512 --> 00:04:16.311
the name and the numbers.

61
00:04:16.311 --> 00:04:20.478
So here, we can do
return sum(self.numbers).

62
00:04:22.856 --> 00:04:26.272
And then, now that we have the total,

63
00:04:26.272 --> 00:04:28.189
we can do player.total.

64
00:04:33.547 --> 00:04:36.630
So the key difference is that objects

65
00:04:37.944 --> 00:04:42.158
not only have data in the form of self dot

66
00:04:42.158 --> 00:04:46.048
the variable name, self dot the numbers,

67
00:04:46.048 --> 00:04:48.418
but it can also have actions or methods

68
00:04:48.418 --> 00:04:49.820
associated with it.

69
00:04:49.820 --> 00:04:52.360
So let's go over to the
terminal and run this code.

70
00:04:52.360 --> 00:04:54.860
Surely you know what's coming.

71
00:04:56.621 --> 00:04:58.745
And 51 is the number that comes out.

72
00:04:58.745 --> 00:05:01.531
And throughout all of this,
I know that adding together

73
00:05:01.531 --> 00:05:05.695
the lottery numbers is not
a very useful thing to do,

74
00:05:05.695 --> 00:05:08.695
but this is only for example really.

75
00:05:12.103 --> 00:05:14.627
Okay, so what if we wanted

76
00:05:14.627 --> 00:05:17.682
to have two different lottery players?

77
00:05:17.682 --> 00:05:21.015
We wanted a player one and a player two.

78
00:05:31.247 --> 00:05:34.669
Okay, so here we have player
one being a lottery player,

79
00:05:34.669 --> 00:05:37.249
and player two being
another lottery player.

80
00:05:37.249 --> 00:05:39.916
So two distinct lottery players.

81
00:05:42.079 --> 00:05:43.410
In order to make you believe me

82
00:05:43.410 --> 00:05:44.792
that these two are distinct,

83
00:05:44.792 --> 00:05:47.342
I'm gonna print where the player one

84
00:05:47.342 --> 00:05:49.259
is equal to player two.

85
00:05:50.277 --> 00:05:53.777
Remember, when we do things
with two equal signs,

86
00:05:53.777 --> 00:05:57.589
we are comparing things as
opposed to assigning things.

87
00:05:57.589 --> 00:06:00.406
So when we run this comparison,

88
00:06:00.406 --> 00:06:02.839
we get the keyword False,

89
00:06:02.839 --> 00:06:03.953
because player one and player two

90
00:06:03.953 --> 00:06:06.370
are not the same thing, okay?

91
00:06:07.698 --> 00:06:10.281
They are two different entities

92
00:06:11.394 --> 00:06:13.894
that share the same signature.

93
00:06:16.684 --> 00:06:19.017
For example, player_one.name

94
00:06:21.039 --> 00:06:23.789
and player_two.name are the same.

95
00:06:26.893 --> 00:06:29.726
If we run this again, we get True.

96
00:06:31.133 --> 00:06:34.883
Because in both instances,
self.name is Rolf.

97
00:06:36.655 --> 00:06:39.346
So here's what self means.

98
00:06:39.346 --> 00:06:40.929
Player_one is self.

99
00:06:43.194 --> 00:06:44.777
Player_two is self.

100
00:06:45.981 --> 00:06:50.135
But they are different instances of self.

101
00:06:50.135 --> 00:06:52.385
When we do player_one.name,

102
00:06:54.390 --> 00:06:58.670
what's happening here is
that self is player one.

103
00:06:58.670 --> 00:07:01.617
So what we get is the player one's name.

104
00:07:01.617 --> 00:07:03.535
If we do player_two.name,

105
00:07:03.535 --> 00:07:06.618
what we get is the player two's name.

106
00:07:07.700 --> 00:07:10.782
But they are the same,
so why does it matter

107
00:07:10.782 --> 00:07:13.893
that we can access one or another?

108
00:07:13.893 --> 00:07:16.819
Well, they don't have to be the same.

109
00:07:16.819 --> 00:07:21.266
To the init method, we
can pass a parameter.

110
00:07:21.266 --> 00:07:23.958
And then we can do something like Rolf

111
00:07:23.958 --> 00:07:27.625
for the first one and
John for the next one.

112
00:07:28.601 --> 00:07:32.768
So when we create a new object,
we pass in Rolf to be name.

113
00:07:36.013 --> 00:07:38.906
Self is automatically generated for us,

114
00:07:38.906 --> 00:07:41.999
so we do not have to pass self in.

115
00:07:41.999 --> 00:07:46.000
So Rolf becomes name,
and John becomes name

116
00:07:46.000 --> 00:07:48.000
in a separate execution.

117
00:07:51.774 --> 00:07:54.526
Here's a trick question.

118
00:07:54.526 --> 00:07:55.675
What do you think is gonna come out

119
00:07:55.675 --> 00:07:57.253
when we run this code again?

120
00:07:57.253 --> 00:07:58.311
Remember, what we are printing

121
00:07:58.311 --> 00:08:02.478
is whether player one's name
is equal to player two's name.

122
00:08:03.636 --> 00:08:05.747
Do you think True is gonna come out,

123
00:08:05.747 --> 00:08:07.997
or False is gonna come out?

124
00:08:12.513 --> 00:08:14.950
The answer may surprise you.

125
00:08:14.950 --> 00:08:16.283
True comes outs.

126
00:08:17.840 --> 00:08:21.114
And that is because even
though we've passed Rolf

127
00:08:21.114 --> 00:08:25.031
into this argument and
John into this argument,

128
00:08:25.963 --> 00:08:30.296
self.name, when we
assign it is still Rolf.

129
00:08:30.296 --> 00:08:33.338
So what we have to remember
is to put name in there.

130
00:08:33.338 --> 00:08:35.636
This name is that one.

131
00:08:35.636 --> 00:08:39.125
And self.name, the object's name,

132
00:08:39.125 --> 00:08:41.542
becomes this parameter there.

133
00:08:44.114 --> 00:08:48.046
Then again, the numbers are
always the same as well.

134
00:08:48.046 --> 00:08:51.068
So even though now when
we run this we get False,

135
00:08:51.068 --> 00:08:54.798
because the names no longer are the same,

136
00:08:54.798 --> 00:08:56.003
the numbers are still the same,

137
00:08:56.003 --> 00:08:58.807
because we've not changed them.

138
00:08:58.807 --> 00:09:02.784
So both objects will
have the same numbers.

139
00:09:02.784 --> 00:09:04.842
We can change that though.

140
00:09:04.842 --> 00:09:09.009
We can say player_one.numbers
= (1, 2, 3, 6, 7, 8)

141
00:09:13.125 --> 00:09:15.455
for example, and then we can compare

142
00:09:15.455 --> 00:09:18.872
player one numbers to player two numbers,

143
00:09:21.662 --> 00:09:24.993
and we should get False, right?

144
00:09:24.993 --> 00:09:28.995
What do you think's gonna
happen when we press play?

145
00:09:28.995 --> 00:09:30.554
You think we're gonna get an error?

146
00:09:30.554 --> 00:09:33.382
Have we changed the topple?

147
00:09:33.382 --> 00:09:35.304
Are we gonna get True?

148
00:09:35.304 --> 00:09:39.471
Or do you think we cannot
change numbers like that?

149
00:09:42.624 --> 00:09:44.957
What's your gut telling you?

150
00:09:46.786 --> 00:09:48.508
And we get False,

151
00:09:48.508 --> 00:09:50.304
which is what I would expect,

152
00:09:50.304 --> 00:09:54.471
because player one's numbers,
when the object was created,

153
00:09:57.384 --> 00:10:00.245
which is when the init method runs,

154
00:10:00.245 --> 00:10:02.795
player one's numbers were assigned

155
00:10:02.795 --> 00:10:05.212
to be 5, 9, 12, 3, 1, and 21,

156
00:10:06.674 --> 00:10:09.710
but then we replaced that box.

157
00:10:09.710 --> 00:10:11.205
We took everything out of it,

158
00:10:11.205 --> 00:10:12.980
and we put something new in it.

159
00:10:12.980 --> 00:10:16.702
And what we put in it
was 1, 2, 3, 6, 7, and 8.

160
00:10:16.702 --> 00:10:20.264
Remember, we have not changed the topple.

161
00:10:20.264 --> 00:10:24.910
We have just removed it
and put another one in.

162
00:10:24.910 --> 00:10:29.177
And player two still has
the original numbers there,

163
00:10:29.177 --> 00:10:31.483
so the numbers are then
gonna be different,

164
00:10:31.483 --> 00:10:33.626
because player one's numbers are these,

165
00:10:33.626 --> 00:10:35.579
player two's numbers are these,

166
00:10:35.579 --> 00:10:37.412
and then we get False.

167
00:10:42.274 --> 00:10:45.132
Hopefully, that made sense.

168
00:10:45.132 --> 00:10:47.475
In the next video, we're gonna move over

169
00:10:47.475 --> 00:10:50.392
from lottery players into students,

170
00:10:51.328 --> 00:10:53.439
and we're gonna look at how we can create

171
00:10:53.439 --> 00:10:55.520
a student class that has marks,

172
00:10:55.520 --> 00:10:58.348
and then we can add
more marks to a student

173
00:10:58.348 --> 00:11:01.008
and calculate averages
and things like that.

174
00:11:01.008 --> 00:11:02.297
So we offer (mumbles).

175
00:11:02.297 --> 00:11:03.748
I'll see you in the very next video.

176
00:11:03.748 --> 00:11:05.246
And I'm really excited to guide you

177
00:11:05.246 --> 00:11:07.319
through object oriented programming.

178
00:11:07.319 --> 00:11:08.167
I'll see you there.

