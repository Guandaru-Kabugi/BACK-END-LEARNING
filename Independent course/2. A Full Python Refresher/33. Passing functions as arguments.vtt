WEBVTT

1
00:00:00.717 --> 00:00:02.764
- [Instructor] Hi and
welcome back to the course.

2
00:00:02.764 --> 00:00:03.597
In this video we're going to look

3
00:00:03.597 --> 00:00:06.964
at passing functions as parameters.

4
00:00:06.964 --> 00:00:09.013
It is a much more advanced concept

5
00:00:09.013 --> 00:00:13.180
that we can use a lot when
creating nice, readable code,

6
00:00:14.302 --> 00:00:18.219
and also when we want to
generalise code a lot.

7
00:00:19.562 --> 00:00:21.975
We will use it later on in the course,

8
00:00:21.975 --> 00:00:25.274
right now it may look
like it's not very useful,

9
00:00:25.274 --> 00:00:27.439
again, just like the
last stuff we looked at,

10
00:00:27.439 --> 00:00:30.245
but nevertheless the
complete Python refresher

11
00:00:30.245 --> 00:00:34.396
that I want for you has
to cover this stuff.

12
00:00:34.396 --> 00:00:38.563
So, I'm going to create a
method called methodception.

13
00:00:39.779 --> 00:00:43.069
And it's going to take
in a single parameter.

14
00:00:43.069 --> 00:00:46.465
But this parameter is not
something that we can add,

15
00:00:46.465 --> 00:00:48.215
or multiply or print.

16
00:00:49.528 --> 00:00:52.611
It is a method that we're gonna call.

17
00:00:54.630 --> 00:00:58.797
So, add to, numbers, it's
gonna be another method.

18
00:01:02.871 --> 00:01:05.788
And that's gonna return 35 plus 77.

19
00:01:06.988 --> 00:01:08.655
Now, what we can do,

20
00:01:10.928 --> 00:01:14.345
is print methodception of add to numbers.

21
00:01:16.407 --> 00:01:18.231
Now, here's the thing.

22
00:01:18.231 --> 00:01:21.059
Normally, when we call a method,

23
00:01:21.059 --> 00:01:24.463
we would put in opening and
closing brackets at the end.

24
00:01:24.463 --> 00:01:28.040
But in this case, we're
not gonna put them in.

25
00:01:28.040 --> 00:01:30.361
What we're gonna do is
we're gonna pass the method

26
00:01:30.361 --> 00:01:32.953
as a parameter to methodception,

27
00:01:32.953 --> 00:01:36.413
and methodception is
gonna run that method.

28
00:01:36.413 --> 00:01:38.722
So we are not gonna run it here.

29
00:01:38.722 --> 00:01:40.722
It is gonna run up here.

30
00:01:42.080 --> 00:01:46.583
And then that's gonna run,
and return 35 plus 77.

31
00:01:46.583 --> 00:01:47.743
So essentially what we're doing

32
00:01:47.743 --> 00:01:49.745
is we're passing a function, a method,

33
00:01:49.745 --> 00:01:52.495
as a parameter to another method.

34
00:01:59.559 --> 00:02:02.053
If we run this code, we get 112,

35
00:02:02.053 --> 00:02:05.009
which is the sum of 35 and 77,

36
00:02:05.009 --> 00:02:07.842
so this works as you would expect.

37
00:02:10.973 --> 00:02:13.712
Now here's something else that we can do,

38
00:02:13.712 --> 00:02:16.936
which is much more interesting.

39
00:02:16.936 --> 00:02:20.412
We can do something that's
called a lambda function.

40
00:02:20.412 --> 00:02:23.995
A lambda function is
an anonymous function.

41
00:02:24.965 --> 00:02:29.132
So we can do print,
methodception, lambda, 35 plus 77.

42
00:02:35.614 --> 00:02:38.095
So we get the same value back,

43
00:02:38.095 --> 00:02:40.012
but now we are calling,

44
00:02:42.026 --> 00:02:45.622
this function is what we're
passing into methodception,

45
00:02:45.622 --> 00:02:48.248
and then that is running the function.

46
00:02:48.248 --> 00:02:51.159
So this function is exactly
the same as this one,

47
00:02:51.159 --> 00:02:53.689
except it doesn't have a name.

48
00:02:53.689 --> 00:02:56.344
And lambda functions
are always in one line,

49
00:02:56.344 --> 00:02:58.514
so you can't have them multi-line,

50
00:02:58.514 --> 00:03:00.764
so it's always in one line.

51
00:03:01.971 --> 00:03:05.304
Okay, so passing functions to functions,

52
00:03:06.697 --> 00:03:09.929
apart from being some sort
of inception sort of thing,

53
00:03:09.929 --> 00:03:12.262
it's actually really useful.

54
00:03:15.558 --> 00:03:19.802
This is part of a style of
programming, or a paradigm,

55
00:03:19.802 --> 00:03:22.370
called declarative programming
or functional programming,

56
00:03:22.370 --> 00:03:24.819
they're both sort of similar.

57
00:03:24.819 --> 00:03:28.498
And declarative is probably
part of functional programming.

58
00:03:28.498 --> 00:03:33.312
And it's especially useful
when we want to work with data.

59
00:03:33.312 --> 00:03:35.147
For example, let's say we've got a list,

60
00:03:35.147 --> 00:03:38.230
13, 56, 77, 484, something like that.

61
00:03:39.237 --> 00:03:43.320
And then we want to remove
one of those elements.

62
00:03:48.468 --> 00:03:50.433
A way to do it would
be to do something like

63
00:03:50.433 --> 00:03:54.279
my underscore list dot
remove, I think, 13,

64
00:03:54.279 --> 00:03:57.362
and that would remove the element 13.

65
00:03:58.715 --> 00:04:02.882
But, say we wanted to remove
all the elements that are even.

66
00:04:04.969 --> 00:04:08.799
We can no longer do my list dot remove,

67
00:04:08.799 --> 00:04:11.966
56, and then my list, dot remove, 484,

68
00:04:13.510 --> 00:04:14.648
it's starting to get long.

69
00:04:14.648 --> 00:04:17.836
If you have a lot of elements,
that gets really complicated.

70
00:04:17.836 --> 00:04:19.831
So I would not recommend that you do that.

71
00:04:19.831 --> 00:04:23.602
Instead, what you would
do, is you would use

72
00:04:23.602 --> 00:04:26.852
a Python built in method called filter.

73
00:04:28.426 --> 00:04:30.432
And what this method does is it allows you

74
00:04:30.432 --> 00:04:32.515
to keep only some values.

75
00:04:34.548 --> 00:04:38.807
So this method takes in a
function, and also an iterable.

76
00:04:38.807 --> 00:04:40.515
So we're gonna create the function first,

77
00:04:40.515 --> 00:04:44.682
lambda X, X is not 13, and
the iterable is my list.

78
00:04:49.788 --> 00:04:51.934
So we're gonna print this out.

79
00:04:51.934 --> 00:04:55.055
Also remember, as of Python 3.5,

80
00:04:55.055 --> 00:04:58.244
whenever you call the filter function,

81
00:04:58.244 --> 00:05:00.898
you also have to surround it by list

82
00:05:00.898 --> 00:05:05.591
if you want it to come
out in the form of a list.

83
00:05:05.591 --> 00:05:07.646
So what we're doing here is we're saying,

84
00:05:07.646 --> 00:05:11.813
we're gonna filter this list
using this function here.

85
00:05:13.345 --> 00:05:16.678
So, let's run it and see what comes out.

86
00:05:20.712 --> 00:05:25.492
And as you can see, what
comes out is 56, 77, 484.

87
00:05:25.492 --> 00:05:29.575
So basically all of the
numbers that were not 13.

88
00:05:32.749 --> 00:05:33.582
Okay.

89
00:05:35.862 --> 00:05:38.060
To further explain lambda functions,

90
00:05:38.060 --> 00:05:39.871
we can do things like this,

91
00:05:39.871 --> 00:05:43.038
lambda X, X multiplied by three, five.

92
00:05:45.719 --> 00:05:49.886
Here we define a lambda
function with one parameter, X.

93
00:05:51.755 --> 00:05:54.987
And the body of the function
is X multiplied by three.

94
00:05:54.987 --> 00:05:58.737
So think of this function
essentially as def,

95
00:06:03.211 --> 00:06:05.878
and then what we're doing is F5.

96
00:06:06.948 --> 00:06:09.768
These two are identical.

97
00:06:09.768 --> 00:06:11.914
There's no difference between them,

98
00:06:11.914 --> 00:06:16.748
so let this be a bit of food
for thought sort of thing.

99
00:06:16.748 --> 00:06:19.333
What this will print out is 15,

100
00:06:19.333 --> 00:06:22.386
and what this will print
out is 15, it's identical.

101
00:06:22.386 --> 00:06:24.811
You wouldn't normally do this.

102
00:06:24.811 --> 00:06:27.471
You would use lambda
functions more frequently

103
00:06:27.471 --> 00:06:29.720
in things like filter.

104
00:06:29.720 --> 00:06:32.014
Because it makes a bit more sense.

105
00:06:32.014 --> 00:06:34.417
However, we've got here a function

106
00:06:34.417 --> 00:06:36.834
that essentially says not 13,

107
00:06:37.893 --> 00:06:42.026
so we could create that function, not 13.

108
00:06:42.026 --> 00:06:43.609
Return X is not 13.

109
00:06:46.376 --> 00:06:50.043
And then we could replace
that here, not 13.

110
00:06:55.166 --> 00:06:55.999
Okay.

111
00:06:55.999 --> 00:06:57.346
So this is something we can do,

112
00:06:57.346 --> 00:06:59.483
we do not have to use a lambda function.

113
00:06:59.483 --> 00:07:01.882
We can use a normal function if we prefer.

114
00:07:01.882 --> 00:07:05.502
And this works in exactly the same way.

115
00:07:05.502 --> 00:07:09.716
As you can see we get
the same output back.

116
00:07:09.716 --> 00:07:11.520
So what we're doing here is
we're running this function

117
00:07:11.520 --> 00:07:14.954
against this list and
filtering out all those values,

118
00:07:14.954 --> 00:07:16.949
or rather keeping only all those values,

119
00:07:16.949 --> 00:07:19.116
that match this condition.

120
00:07:21.887 --> 00:07:25.887
So we're keeping all the
values that are not 13.

121
00:07:28.035 --> 00:07:30.316
Filter is pretty neat,

122
00:07:30.316 --> 00:07:34.557
and it essentially goes
against list comprehension.

123
00:07:34.557 --> 00:07:36.760
You could do the same thing
with list comprehension.

124
00:07:36.760 --> 00:07:41.612
It would be something like,
print, X for X in my list,

125
00:07:41.612 --> 00:07:42.862
if X is not 13.

126
00:07:44.877 --> 00:07:47.285
So it may be slightly simpler,

127
00:07:47.285 --> 00:07:51.452
and many many Python programmers
would rather use this,

128
00:07:52.470 --> 00:07:55.652
they would rather use
the list comprehension.

129
00:07:55.652 --> 00:08:00.052
However, I mentioned in the
list comprehension lecture,

130
00:08:00.052 --> 00:08:03.074
that list comprehension
is quite unique to Python,

131
00:08:03.074 --> 00:08:05.761
and to a couple other
programming languages.

132
00:08:05.761 --> 00:08:09.305
However, the concept of filter is present

133
00:08:09.305 --> 00:08:11.670
in many programming languages.

134
00:08:11.670 --> 00:08:15.372
So if you programme with
other programming languages,

135
00:08:15.372 --> 00:08:17.528
or you work with people who programme

136
00:08:17.528 --> 00:08:19.464
with other programming languages,

137
00:08:19.464 --> 00:08:21.877
you probably want to stick to filter,

138
00:08:21.877 --> 00:08:25.019
because it is more familiar to people.

139
00:08:25.019 --> 00:08:28.436
The performance is more or less the same.

140
00:08:29.439 --> 00:08:32.586
Or maybe slightly better
for list comprehension.

141
00:08:32.586 --> 00:08:34.893
So if performance is an issue,

142
00:08:34.893 --> 00:08:38.302
then you will want to
investigate which one is better,

143
00:08:38.302 --> 00:08:40.911
and use that accordingly.

144
00:08:40.911 --> 00:08:43.747
But apart from that, it's up
to your preference really,

145
00:08:43.747 --> 00:08:45.614
and the people around you.

146
00:08:45.614 --> 00:08:47.852
In some cases people use filter,

147
00:08:47.852 --> 00:08:49.901
and in others will use list comprehension,

148
00:08:49.901 --> 00:08:51.852
I tend to prefer list comprehensions,

149
00:08:51.852 --> 00:08:54.268
but then I also do a lot
of JavaScript programming

150
00:08:54.268 --> 00:08:55.892
and they don't have list comprehensions,

151
00:08:55.892 --> 00:08:59.184
so we're stuck with
using things like filter.

152
00:08:59.184 --> 00:09:01.642
Then again, nothing is
perfect in this world,

153
00:09:01.642 --> 00:09:03.964
so not everything can be Python.

154
00:09:03.964 --> 00:09:07.685
Without further ado, I'll see
you in the very next video.

